import * as CryptoJS from 'crypto-js';
import * as blake from './libs/blake2b';
export declare const libs: {
    CryptoJS: CryptoJS.Hashes;
    blake: typeof blake;
    keccak256: any;
    base58: {
        encode(buffer: Uint8Array): string;
        decode(string: string): Uint8Array;
    };
    axlsign: any;
};
export declare const concat: (...arrays: (number[] | Uint8Array)[]) => Uint8Array;
export declare function buildAddress(publicKeyBytes: Uint8Array, chainId?: string): string;
export declare function buildSeedHash(seedBytes: Uint8Array, nonce?: number): Uint8Array;
export declare const stringToUint8Array: (str: string) => Uint8Array;
export declare type PUBLIC_KEY_TYPES = string | PublicKey | Uint8Array;
export declare type Option<T> = T | null | undefined;
export declare const publicKeyToString: (pk: PUBLIC_KEY_TYPES) => string;
export declare const ADDRESS_LENGTH = 26;
export declare const PUBLIC_KEY_LENGTH = 32;
export declare const PRIVATE_KEY_LENGTH = 32;
export declare const SIGNATURE_LENGTH = 64;
export declare function blake2b(input: Uint8Array): Uint8Array;
export declare function keccak(input: Uint8Array): Uint8Array;
export declare function sha256(input: Uint8Array): Uint8Array;
export declare const base58encode: (input: Uint8Array) => string;
export declare const base58decode: (input: string) => Uint8Array;
export interface PublicKey {
    public: string;
}
export interface PrivateKey {
    private: string;
}
export declare type KeyPair = PublicKey & PrivateKey;
export declare const keyPair: (seed: string) => KeyPair;
export declare const publicKey: (seed: string) => string;
export declare const privateKey: (seed: string) => string;
export declare const address: (keyOrSeed: string | PublicKey | KeyPair, chainId?: string) => string;
export declare const signBytes: (bytes: Uint8Array, seed: string) => string;
export declare const verifySignature: (publicKey: string, bytes: Uint8Array, signature: string) => boolean;
export declare function arraysEqual(a: any[] | Uint8Array, b: any[] | Uint8Array): boolean;
export declare const hashBytes: (bytes: Uint8Array) => string;
export declare const signWithPrivateKey: (dataBytes: Uint8Array, privateKey: string) => string;
export declare function randomUint8Array(length: number): Uint8Array;
export declare function byteArrayToHexString(bytes: Uint8Array): string;
export declare function hexStringToByteArray(str: string): number[];
export declare function getSharedKey(privateKeyFrom: string, publicKeyTo: string): Uint8Array;
export declare function getKEK(sharedKey: string, prefix?: string): {
    KEK: CryptoJS.WordArray;
    P: Uint8Array;
};
export declare function encryptMessage(sharedKey: string, message: string, prefix?: string): string;
export declare function decryptMessage(sharedKey: string, encryptedMessage: string, prefix?: string): string;
